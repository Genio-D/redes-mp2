sender(socket, file, window_size)
    window_start = 0
    window_end = window_size
    received_acks = [False * window_size]
    num_timeouts = 0
    
    while True
        if num_timeouts == 3
            return -1

        for each index in received_acks
            if not received_acks[index]
                send_packet(socket, file, index, window_start)
        ack_num = store_acks(socket, received_acks, window_start)
        
        if ack_num == empty
            timeout(1)
            num_timeouts += 1
        else
            num_timeouts = 0

        increment = move_window(received_acks)
        window_start += increment
        window_end += increment

send_packet(socket, file, index, window_start)
    seq_num = index + window_start
    offset = (seq_num - 1) * 1000 \\ char
    fseek(file, offset, SEEK_SET)
    message = fgets(file, 1000)

    packet = Packet()
    packet.setSeq(seq_num)
    packet.setData(message)
    send(socket, packet)

store_acks(socket, received_acks, window_start)
    ack_num = receive(socket)
    while ack_num != empty
        index = ack_num - window_start
        received_acks[index] = True
        ack_num = receive(socket)
    return ack_num

move_window(received_acks)
    increment = 0
    for each index in received_acks
        if received_acks[index] == False
            break
        increment += 1
        received_acks.shift_left()
    return increment
